mode = 'lines',
line = list(color = 'rgb(201, 2, 240)', width = 2)) %>%
layout(title = "Average Yearly Power Consumption",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (Average watt-hours)"))
#Sub-meter 3
plot_ly(avgyearALL,
x = ~avgyearALL$Year,
y = ~avgyearALL$meanSub_3,
name = 'Water Heater & AC',
type = 'scatter',
mode = 'lines',
line = list(color = 'rgb(3, 241, 99)', width = 2)) %>%
layout(title = "Average Yearly Power Consumption Sub-meter 3",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (Average watt-hours)"))
houseWeek <- filter(Yrs2007_2009,
Year == 2007 & Week == 21)
plot_ly(houseWeek, x = ~houseWeek$DateTime, y = ~houseWeek$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseWeek$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseWeek$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption week 21 May 2007",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
houseWeek <- filter(Yrs2007_2009,
Year == 2007 & Week == 21)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21)
plot_ly(houseWeek, x = ~houseWeek$DateTime, y = ~houseWeek$Sub_metering_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseWeek$Sub_metering_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseWeek$Sub_metering_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption week 21 May 2007",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
View(houseWeek)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
View(houseWeek)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21)
View(houseWeek)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Day) %>%
summarise(meanSub_1 = mean(Sub_metering_1))
View(houseWeek)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Day) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
View(houseWeek)
plot_ly(houseWeek, x = ~houseWeek$Day, y = ~houseWeek$meanSub_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseWeek$meanSub_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseWeek$meanSub_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption week 21 May 2007",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Weekdays) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
View(houseWeek)
plot_ly(houseWeek, x = ~houseWeek$Weekdays, y = ~houseWeek$meanSub_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseWeek$meanSub_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseWeek$meanSub_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption week 21 May 2007",
xaxis = list(title = "Time"),
yaxis = list (title = "Power (watt-hours)"))
View(houseWeek)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Weekdays,
Day) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
View(houseWeek)
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Weekdays) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
View(houseWeek)
View(houseWeek)
houseWeek$Weekdays <- weekdays(houseWeek$Weekdays)
class(weekdays(houseWeek$Weekdays))
class(houseWeek$Weekdays)
str(houseWeek$Weekdays)
print(levels(houseWeek$Weekdays))
x = factor(x,levels(x)[c(2,6:7,5,1,3:4)])
houseWeek$Weekdays = factor(houseWeek$Weekdays,levels(houseWeek$Weekdays)[c(2,6:7,5,1,3:4)])
print(levels(houseWeek$Weekdays))
#Graphing it
plot_ly(houseWeek, x = ~houseWeek$Weekdays, y = ~houseWeek$meanSub_1, name = 'Kitchen', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~houseWeek$meanSub_2, name = 'Laundry Room', mode = 'lines') %>%
add_trace(y = ~houseWeek$meanSub_3, name = 'Water Heater & AC', mode = 'lines') %>%
layout(title = "Power Consumption week 21 May 2007",
yaxis = list (title = "Power (watt-hours)"))
View(houseWeek)
?rema,e
?rename
select(houseWeek, houseWeek$Weekdays = Weekdays)
##////////////////WEEKLY PATTERNS////////////////////////##
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Weekdays) %>%
levels(Weekdays[c(2,6:7,5,1,3:4)]) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
##////////////////WEEKLY PATTERNS////////////////////////##
houseWeek <- filter(Yrs2007_2010,
Year == 2007 & Week == 21) %>%
group_by(Year,
Month,
Week,
Weekdays) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3))
View(houseWeek)
#Create data for graph
xdf <- data.frame("Submeter_1" = c(0.06208991),
"Submeter_2" = c(0.07140047),
"Submeter_3" = c(0.35729265),
"Unknown" = c(0.50921697))
xdf
##Usage of each submeter 2007
totalConsump2007 <- Yrs2007_2010 %>%
filter(Year == 2007) %>%
summarise(totalConsump = sum(GAP))
View(totalConsump2007)
totalConsump2007 <- Yrs2007_2010 %>%
filter(Year == 2007) %>%
summarise(totalConsump = sum(GAP))
totalSub1_2007 <- Yrs2007_2010 %>%
filter(Year == 2007) %>%
summarise(totalSub1 = sum(Sub_metering_1))
totalSub2_2007 <- Yrs2007_2010 %>%
filter(Year == 2007) %>%
summarise(totalSub2 = sum(Sub_metering_2))
totalSub3_2007 <- Yrs2007_2010 %>%
filter(Year == 2007) %>%
summarise(totalSub3 = sum(Sub_metering_3))
totalSub4_2007 <- Yrs2007_2010 %>%
filter(Year == 2007) %>%
summarise(totalSub4 = sum(Active_energy))
totalConsump2007
#Create data for graph
df2007 <- data.frame("Submeter_1" = c(totalSub1_2007/totalConsump2007),
"Submeter_2" = c(totalSub2_2007/totalConsump2007),
"Submeter_3" = c(totalSub3_2007/totalConsump2007),
"Unknown" = c(totalSub4_2007/totalConsump2007))
View(df2007)
barplot(df2007, main="Power usage distribution",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
barplot(df2007, main="Power usage distribution",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(df2007))
barplot(df2007, main="Power usage distribution",
xlab="Number of Gears", col=c(),
legend = rownames(df2007))
df2007
##Usage of each submeter 2008
totalConsump2008 <- Yrs2007_2010 %>%
filter(Year == 2008) %>%
summarise(totalConsump = sum(GAP))
totalSub1_2008 <- Yrs2007_2010 %>%
filter(Year == 2008) %>%
summarise(totalSub1 = sum(Sub_metering_1))
totalSub2_2008 <- Yrs2007_2010 %>%
filter(Year == 2008) %>%
summarise(totalSub2 = sum(Sub_metering_2))
totalSub3_2008 <- Yrs2007_2010 %>%
filter(Year == 2008) %>%
summarise(totalSub3 = sum(Sub_metering_3))
totalSub4_2008 <- Yrs2007_2010 %>%
filter(Year == 2008) %>%
summarise(totalSub4 = sum(Active_energy))
#Create data for graph
df2008 <- data.frame("Submeter_1" = c(totalSub1_2008/totalConsump2008),
"Submeter_2" = c(totalSub2_2008/totalConsump2008),
"Submeter_3" = c(totalSub3_2008/totalConsump2008),
"Unknown" = c(totalSub4_2008/totalConsump2008))
View(df2008)
##Usage of each submeter 2009
totalConsump2009 <- Yrs2007_2010 %>%
filter(Year == 2009) %>%
summarise(totalConsump = sum(GAP))
totalSub1_2009 <- Yrs2007_2010 %>%
filter(Year == 2009) %>%
summarise(totalSub1 = sum(Sub_metering_1))
totalSub2_2009 <- Yrs2007_2010 %>%
filter(Year == 2009) %>%
summarise(totalSub2 = sum(Sub_metering_2))
totalSub3_2009 <- Yrs2007_2010 %>%
filter(Year == 2009) %>%
summarise(totalSub3 = sum(Sub_metering_3))
totalSub4_2009 <- Yrs2007_2010 %>%
filter(Year == 2009) %>%
summarise(totalSub4 = sum(Active_energy))
#Create data for graph
df2009 <- data.frame("Submeter_1" = c(totalSub1_2009/totalConsump2009),
"Submeter_2" = c(totalSub2_2009/totalConsump2009),
"Submeter_3" = c(totalSub3_2009/totalConsump2009),
"Unknown" = c(totalSub4_2009/totalConsump2009))
View(df2009)
2010
View(df2010)
#Create data for graph
df2010 <- data.frame("Submeter_1" = c(totalSub1_2010/totalConsump2010),
"Submeter_2" = c(totalSub2_2010/totalConsump2010),
"Submeter_3" = c(totalSub3_2010/totalConsump2010))
View(yr_2010SELECT)
##Usage of each submeter 2010
totalConsump2010 <- Yrs2007_2010 %>%
filter(Year == 2010) %>%
summarise(totalConsump = sum(GAP))
totalSub1_2010 <- Yrs2007_2010 %>%
filter(Year == 2010) %>%
summarise(totalSub1 = sum(Sub_metering_1))
totalSub2_2010 <- Yrs2007_2010 %>%
filter(Year == 2010) %>%
summarise(totalSub2 = sum(Sub_metering_2))
totalSub3_2010 <- Yrs2007_2010 %>%
filter(Year == 2010) %>%
summarise(totalSub3 = sum(Sub_metering_3))
#Create data for graph
df2010 <- data.frame("Submeter_1" = c(totalSub1_2010/totalConsump2010),
"Submeter_2" = c(totalSub2_2010/totalConsump2010),
"Submeter_3" = c(totalSub3_2010/totalConsump2010))
View(df2010)
totalSub4_2009 <- Yrs2007_2010 %>%
filter(Year == 2010) %>%
summarise(totalSub4 = sum(Active_energy))
totalSub4_2010 <- Yrs2007_2010 %>%
filter(Year == 2010) %>%
summarise(totalSub4 = sum(Active_energy))
#Create data for graph
df2010 <- data.frame("Submeter_1" = c(totalSub1_2010/totalConsump2010),
"Submeter_2" = c(totalSub2_2010/totalConsump2010),
"Submeter_3" = c(totalSub3_2010/totalConsump2010)
"Unknown" = c(totalSub4_2010/totalConsump2010))
#Create data for graph
df2010 <- data.frame("Submeter_1" = c(totalSub1_2010/totalConsump2010),
"Submeter_2" = c(totalSub2_2010/totalConsump2010),
"Submeter_3" = c(totalSub3_2010/totalConsump2010),
"Unknown" = c(totalSub4_2010/totalConsump2010))
View(df2010)
##PROJECT:IoT Analytics Domain Research and Exploratory Data Analysis
##NAME:Francesca Prata
##SCRIPT:Connecting to database
##DATE:18-02-2019
##VERSION:4
rm(list = ls())
set.seed(123)
Sys.setlocale("LC_TIME", "C")
if(!require(pacman))install.packages("pacman")
pacman::p_load('RMySQL', 'dplyr', 'lubridate', 'ggplot2', 'ggfortify', 'plotly',
'forecast', 'prophet')
library(RMySQL)
library(dplyr)
library(lubridate)
library(ggplot2)
library(ggfortify)
library(plotly)
library(forecast)
library(prophet)
##Create a database connection
con = dbConnect(MySQL(),
user='deepAnalytics',
password='Sqltask1234!',
dbname='dataanalytics2018',
host='data-analytics-2018.cbrosir2cswx.us-east-1.rds.amazonaws.com')
##Downloading the years
yr_2007SELECT <- dbGetQuery(con,"SELECT Date,
Time,
Global_active_power,
Sub_metering_1,
Sub_metering_2,
Sub_metering_3 FROM yr_2007")
yr_2008SELECT <- dbGetQuery(con,"SELECT Date,
Time,
Global_active_power,
Sub_metering_1,
Sub_metering_2,
Sub_metering_3 FROM yr_2008")
yr_2009SELECT <- dbGetQuery(con,"SELECT Date,
Time,
Global_active_power,
Sub_metering_1,
Sub_metering_2,
Sub_metering_3 FROM yr_2009")
yr_2010SELECT <- dbGetQuery(con,"SELECT Date,
Time,
Global_active_power,
Sub_metering_1,
Sub_metering_2,
Sub_metering_3 FROM yr_2010")
##Combine datasets to create the Primary Data Frame
Yrs2007_2010 <- bind_rows(yr_2007SELECT, yr_2008SELECT, yr_2009SELECT, yr_2010SELECT)
##Combine Date and Time attribute to form DateTime
Yrs2007_2010 <-cbind(Yrs2007_2010,
paste(Yrs2007_2010$Date, Yrs2007_2010$Time),
stringsAsFactors=FALSE)
##Header name and relocating it within the dataset
colnames(Yrs2007_2010)[7] <- "DateTime"
Yrs2007_2010 <- Yrs2007_2010[,c(ncol(Yrs2007_2010), 1:(ncol(Yrs2007_2010)-1))]
##Remove old "Date" and "Time" attributes
Yrs2007_2010$Date <- NULL
Yrs2007_2010$Time <- NULL
##Convert DateTime from POSIXlt to POSIXct and adding the time zone
Yrs2007_2010$DateTime <- as.POSIXct(Yrs2007_2010$DateTime, "%Y/%m/%d %H:%M:%S")
attr(Yrs2007_2010$DateTime, "tzone") <- "Europe/Paris"
##Combine datasets to create the Primary Data Frame
Yrs2007_2010 <- bind_rows(yr_2007SELECT, yr_2008SELECT, yr_2009SELECT, yr_2010SELECT)
##Combine Date and Time attribute to form DateTime
Yrs2007_2010 <-cbind(Yrs2007_2010,
paste(Yrs2007_2010$Date, Yrs2007_2010$Time),
stringsAsFactors=FALSE)
##Header name and relocating it within the dataset
colnames(Yrs2007_2010)[7] <- "DateTime"
Yrs2007_2010 <- Yrs2007_2010[,c(ncol(Yrs2007_2010), 1:(ncol(Yrs2007_2010)-1))]
##Remove old "Date" and "Time" attributes
Yrs2007_2010$Date <- NULL
Yrs2007_2010$Time <- NULL
##Convert DateTime from POSIXlt to POSIXct and adding the time zone
Yrs2007_2010$DateTime <- as.POSIXct(Yrs2007_2010$DateTime, "%Y/%m/%d %H:%M:%S")
attr(Yrs2007_2010$DateTime, "tzone") <- "Europe/Paris"
##Creating attributes for different time periods
Yrs2007_2010$Year <- year(Yrs2007_2010$DateTime)
Yrs2007_2010$Quarter <- quarter(Yrs2007_2010$DateTime)
Yrs2007_2010$Month <- month(Yrs2007_2010$DateTime)
Yrs2007_2010$Week <- week(Yrs2007_2010$DateTime)
Yrs2007_2010$Weekdays <- weekdays(Yrs2007_2010$DateTime)
Yrs2007_2010$Day <- day(Yrs2007_2010$DateTime)
Yrs2007_2010$Hour <- hour(Yrs2007_2010$DateTime)
Yrs2007_2010$Minute <- minute(Yrs2007_2010$DateTime)
##Change year, quarter, month, week, weekday and day into factors
Yrs2007_2010$Year <- as.factor(Yrs2007_2010$Year)
Yrs2007_2010$Quarter <- as.factor(Yrs2007_2010$Quarter)
Yrs2007_2010$Month <- as.factor(Yrs2007_2010$Month)
Yrs2007_2010$Week <- as.factor(Yrs2007_2010$Week)
Yrs2007_2010$Weekdays <- as.factor(Yrs2007_2010$Weekdays)
Yrs2007_2010$Day <- as.factor(Yrs2007_2010$Day)
##Creating new variables for global active energy measured in kilowatts per hour
##And for active energy
Yrs2007_2010 <- mutate(Yrs2007_2010, GAP = Global_active_power * (1000/60))
Yrs2007_2010 <- mutate(Yrs2007_2010,
Active_energy = GAP - Sub_metering_1 - Sub_metering_2 - Sub_metering_3)
##////////////////CALCULATING AVERAGES////////////////////////##
##Calculating the average per year
avgyearALL <- Yrs2007_2010 %>%
group_by(Year) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3),
meanSub_4 = mean(Active_energy),
meanGAP = mean(GAP))
##Calculating the average per month
avgmonthALL <- Yrs2007_2010 %>%
group_by(Year,
Month) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3),
meanSub_4 = mean(Active_energy),
meanGAP = mean(GAP))
##Calculating the average per week
avgweekALL <- Yrs2007_2010 %>%
group_by(Year,
Week) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3),
meanSub_4 = mean(Active_energy),
meanGAP = mean(GAP))
##Calculating the average per day
avgdayALL <- Yrs2007_2010 %>%
group_by(Year,
Month,
Weekdays,
Day) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3),
meanSub_4 = mean(Active_energy),
meanGAP = mean(GAP))
##Calculating the average per hour
avghourALL <- Yrs2007_2010 %>%
group_by(Year,
Month,
Weekdays,
Day,
Hour) %>%
summarise(meanSub_1 = mean(Sub_metering_1),
meanSub_2 = mean(Sub_metering_2),
meanSub_3 = mean(Sub_metering_3),
meanSub_4 = mean(Active_energy),
meanGAP = mean(GAP))
##////////////////SUBSETS MONTHLY AVERAGES PER YEAR////////////////////////##
avgmonth2007 <- avgmonthALL %>%
filter(Year == 2007)
avgmonth2008 <- avgmonthALL %>%
filter(Year == 2008)
avgmonth2009 <- avgmonthALL %>%
filter(Year == 2009)
avgmonth2010 <- avgmonthALL %>%
filter(Year == 2010)
##///////////////////SETTING UP DATASET FOR PROPHET/////////////////////////////////##
Yrs2007_2010 <- bind_rows(yr_2007SELECT, yr_2008SELECT, yr_2009SELECT, yr_2010SELECT)
Yrs2007_2010 <- mutate(Yrs2007_2010, GAP = Global_active_power * (1000/60))
Yrs2007_2010 <- mutate(Yrs2007_2010,
Active_energy = GAP - Sub_metering_1 - Sub_metering_2 - Sub_metering_3)
##Remove "Time" attributes
Yrs2007_2010$Time <- NULL
##Convert Date from POSIXlt to POSIXct
Yrs2007_2010$Date <- as.POSIXct(Yrs2007_2010$Date, "%Y-%m-%d")
attr(Yrs2007_2010$Date, "tzone") <- "Europe/Paris"
##///////////////////CREATING SUBSETS/////////////////////////////////##
#Subset for Sub-meter 1
df_daily_Sub1 <- Yrs2007_2010 %>%
group_by(Date) %>%
summarise(y = mean(Sub_metering_1))
##fine tuning data frame
df_daily_Sub1 <- df_daily_Sub1 %>%
select(ds = Date,
y = y)
df_daily_Sub1$ds <- date(df_daily_Sub1$ds)
#Subset for Sub-meter 2
df_daily_Sub2 <- Yrs2007_2010 %>%
group_by(Date) %>%
summarise(y = mean(Sub_metering_2))
##fine tuning data frame
df_daily_Sub2 <- df_daily_Sub2 %>%
select(ds = Date,
y = y)
df_daily_Sub2$ds <- date(df_daily_Sub2$ds)
#Subset for Sub-meter 3
df_daily_Sub3 <- Yrs2007_2010 %>%
group_by(Date) %>%
summarise(y = mean(Sub_metering_3))
##fine tuning data frame
df_daily_Sub3 <- df_daily_Sub3 %>%
select(ds = Date,
y = y)
df_daily_Sub3$ds <- date(df_daily_Sub3$ds)
#Subset for Active energy
df_daily_AE <- Yrs2007_2010 %>%
group_by(Date) %>%
summarise(y = mean(Active_energy))
##fine tuning data frame
df_daily_AE <- df_daily_AE %>%
select(ds = Date,
y = y)
df_daily_AE$ds <- date(df_daily_AE$ds)
#Subset for Global active energy
df_daily_GAP <- Yrs2007_2010 %>%
group_by(Date) %>%
summarise(y = mean(GAP))
##fine tuning data frame
df_daily_GAP <- df_daily_GAP %>%
select(ds = Date,
y = y)
df_daily_GAP$ds <- date(df_daily_GAP$ds)
#Global active energy
m <- prophet(df_daily_GAP, daily.seasonality = TRUE)
future <- make_future_dataframe(m, periods = 730)
forecast <- predict(m, future)
plot(m, forecast)
#For individual components
prophet_plot_components(m, forecast)
Yrs2007_2010 <- mutate(Yrs2007_2010,
Active_energy = GAP -
Sub_metering_1 -
Sub_metering_2 -
Sub_metering_3)
#Retrieve previous data frame
source(1.Data_Setup.R)
#Retrieve previous data frame
source(file =1Data_Setup.R)
?source
#Retrieve previous data frame
source(file = "1.Data_Setup_v4.R")
?source
